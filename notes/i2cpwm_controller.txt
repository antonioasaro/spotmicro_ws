#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <linux/i2c-dev.h>

#include <ros/ros.h>
#include <ros/console.h>

// messages used for any service with no parameters
#include <std_srvs/Empty.h>
// messages used for drive movement topic
#include <geometry_msgs/Twist.h>

// messages used for the absolute and proportional movement topics
#include "i2cpwm_board/Servo.h"
#include "i2cpwm_board/ServoArray.h"
// messages used for the servo setup service
#include "i2cpwm_board/ServoConfig.h"
#include "i2cpwm_board/ServoConfigArray.h"
// request/response of the servo setup service
#include "i2cpwm_board/ServosConfig.h"
// request/response of the drive mode service
#include "i2cpwm_board/DriveMode.h"
#include "i2cpwm_board/Position.h"
#include "i2cpwm_board/PositionArray.h"
// request/response of the integer parameter services
#include "i2cpwm_board/IntValue.h"



typedef struct _servo_config {
    int center;
    int range;
    int direction;
    int mode_pos;
} servo_config;

typedef struct _drive_mode {
    int mode;
    float rpm;
    float radius;
    float track;
    float scale;
} drive_mode;

enum drive_modes {
    MODE_UNDEFINED      = 0,
    MODE_ACKERMAN       = 1,
    MODE_DIFFERENTIAL   = 2,
    MODE_MECANUM        = 3,
    MODE_INVALID        = 4
};

enum drive_mode_positions {
    POSITION_UNDEFINED  = 0,
    POSITION_LEFTFRONT  = 1,
    POSITION_RIGHTFRONT = 2,
    POSITION_LEFTREAR   = 3,
    POSITION_RIGHTREAR  = 4,
    POSITION_INVALID    = 5
};

#define _BASE_ADDR   0x40
#ifndef _PI
#define _PI 3.14159265358979323846
#endif
#define _CONST(s) ((char*)(s))

enum pwm_regs {
  // Registers/etc.
  __MODE1              = 0x00,
  __MODE2              = 0x01,
  __SUBADR1            = 0x02,      // enable sub address 1 support
  __SUBADR2            = 0x03,      // enable sub address 2 support
  __SUBADR3            = 0x04,      // enable sub address 2 support
  __PRESCALE           = 0xFE,
  __CHANNEL_ON_L       = 0x06,
  __CHANNEL_ON_H       = 0x07,
  __CHANNEL_OFF_L      = 0x08,
  __CHANNEL_OFF_H      = 0x09,
  __ALL_CHANNELS_ON_L  = 0xFA,
  __ALL_CHANNELS_ON_H  = 0xFB,
  __ALL_CHANNELS_OFF_L = 0xFC,
  __ALL_CHANNELS_OFF_H = 0xFD,
  __RESTART            = 0x80,
  __SLEEP              = 0x10,      // enable low power mode
  __ALLCALL            = 0x01,
  __INVRT              = 0x10,      // invert the output control logic
  __OUTDRV             = 0x04
};

#define MAX_BOARDS 62
#define MAX_SERVOS (16*MAX_BOARDS)

servo_config _servo_configs[MAX_SERVOS];    // we can support up to 62 boards (1..62), each with 16 PWM devices (1..16)
drive_mode _active_drive;                   // used when converting Twist geometry to PWM values and which servos are for motion
int _last_servo = -1;

int _pwm_boards[MAX_BOARDS];                // we can support up to 62 boards (1..62)
int _active_board = 0;                      // used to determine if I2C SLAVE change is needed
int _controller_io_handle;                  // linux file handle for I2C

int _pwm_frequency = 50;                    // frequency determines the size of a pulse width; higher numbers make RC servos buzz





//* ------------------------------------------------------------------------------------------------------------------------------------
// local private methods
//* ------------------------------------------------------------------------------------------------------------------------------------

static float _abs (float v1)
{
    if (v1 < 0)
        return (0 - v1);
    return v1;
}

static float _min (float v1, float v2)
{
    if (v1 > v2)
        return v2;
    return v1;
}

static float _max (float v1, float v2)
{
    if (v1 < v2)
        return v2;
    return v1;
}

static float _absmin (float v1, float v2)
{
    float a1, a2;
    float sign = 1.0;
    //  if (v1 < 0)
    //      sign = -1.0;
    a1 = _abs(v1);
    a2 = _abs(v2);
    if (a1 > a2)
        return (sign * a2);
    return v1;
}

static float _absmax (float v1, float v2)
{
    float a1, a2;
    float sign = 1.0;
    //  if (v1 < 0)
    //      sign = -1.0;
    a1 = _abs(v1);
    a2 = _abs(v2);
    if (a1 < a2)
        return (sign * a2);
    return v1;
}



static int _smoothing (float speed)
{
    /* if smoothing is desired, then remove the commented code  */
    // speed = (cos(_PI*(((float)1.0 - speed))) + 1) / 2;
    return speed;
}
    

static float _convert_mps_to_proportional (float speed)
{
    /* we use the drive mouter output rpm and wheel radius to compute the conversion */

    float initial, max_rate;    // the max m/s is ((rpm/60) * (2*PI*radius))

    initial = speed;
    
    if (_active_drive.rpm <= 0.0) {
        ROS_ERROR("Invalid active drive mode RPM %6.4f :: RPM must be greater than 0", _active_drive.rpm);
        return 0.0;
    }
    if (_active_drive.radius <= 0.0) {
        ROS_ERROR("Invalid active drive mode radius %6.4f :: wheel radius must be greater than 0", _active_drive.radius);
        return 0.0;
    }

    max_rate = (_active_drive.radius * _PI * 2) * (_active_drive.rpm / 60.0);

    speed = speed / max_rate;
    // speed = _absmin (speed, 1.0);

    ROS_DEBUG("%6.4f = convert_mps_to_proportional ( speed(%6.4f) / ((radus(%6.4f) * pi(%6.4f) * 2) * (rpm(%6.4f) / 60.0)) )", speed, initial, _active_drive.radius, _PI, _active_drive.rpm);
    return speed;
}



static void _set_pwm_frequency (int freq)
{
    int prescale;
    char oldmode, newmode;
    int res;

    _pwm_frequency = freq;   // save to global
    
    ROS_DEBUG("_set_pwm_frequency prescale");
    float prescaleval = 25000000.0; // 25MHz
    prescaleval /= 4096.0;
    prescaleval /= (float)freq;
    prescaleval -= 1.0;
    //ROS_INFO("Estimated pre-scale: %6.4f", prescaleval);
    prescale = floor(prescaleval + 0.5);
    // ROS_INFO("Final pre-scale: %d", prescale);


    ROS_INFO("Setting PWM frequency to %d Hz", freq);

    nanosleep ((const struct timespec[]){{1, 000000L}}, NULL); 


    oldmode = i2c_smbus_read_byte_data (_controller_io_handle, __MODE1);
    newmode = (oldmode & 0x7F) | 0x10; // sleep

    if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __MODE1, newmode)) // go to sleep
        ROS_ERROR("Unable to set PWM controller to sleep mode"); 

    if (0 >  i2c_smbus_write_byte_data(_controller_io_handle, __PRESCALE, (int)(floor(prescale))))
        ROS_ERROR("Unable to set PWM controller prescale"); 

    if (0 > i2c_smbus_write_byte_data(_controller_io_handle, __MODE1, oldmode))
        ROS_ERROR("Unable to set PWM controller to active mode"); 

    nanosleep((const struct timespec[]){{0, 5000000L}}, NULL);   //sleep 5microsec,

    if (0 > i2c_smbus_write_byte_data(_controller_io_handle, __MODE1, oldmode | 0x80))
        ROS_ERROR("Unable to restore PWM controller to active mode");
}



static void _set_pwm_interval_all (int start, int end)
{
    // the public API is ONE based and hardware is ZERO based
    if ((_active_board<1) || (_active_board>62)) {
        ROS_ERROR("Internal error - invalid active board number %d :: PWM board numbers must be between 1 and 62", _active_board);
        return;
    }
    int board = _active_board - 1;

    if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __ALL_CHANNELS_ON_L, start & 0xFF))
        ROS_ERROR ("Error setting PWM start low byte for all servos on board %d", _active_board);
    if (0 >  i2c_smbus_write_byte_data (_controller_io_handle, __ALL_CHANNELS_ON_H, start  >> 8))
        ROS_ERROR ("Error setting PWM start high byte for all servos on board %d", _active_board);
    if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __ALL_CHANNELS_OFF_L, end & 0xFF))
        ROS_ERROR ("Error setting PWM end low byte for all servos on board %d", _active_board);
    if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __ALL_CHANNELS_OFF_H, end >> 8))
        ROS_ERROR ("Error setting PWM end high byte for all servos on board %d", _active_board);
}



static void _set_active_board (int board)
{
    char mode1res;

    if ((board<1) || (board>62)) {
        ROS_ERROR("Invalid board number %d :: board numbers must be between 1 and 62", board);
        return;
    }
    if (_active_board != board) {
        _active_board = board;   // save to global
        
        // the public API is ONE based and hardware is ZERO based
        board--;
        
        if (0 > ioctl (_controller_io_handle, I2C_SLAVE, (_BASE_ADDR+(board)))) {
            ROS_FATAL ("Failed to acquire bus access and/or talk to I2C slave at address 0x%02X", (_BASE_ADDR+board));
            return; /* exit(1) */   /* additional ERROR HANDLING information is available with 'errno' */
        }

        if (_pwm_boards[board]<0) {
            _pwm_boards[board] = 1;

            /* this is guess but I believe the following needs to be done on each board only once */

            if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __MODE2, __OUTDRV))
                ROS_ERROR ("Failed to enable PWM outputs for totem-pole structure");

            if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __MODE1, __ALLCALL))
                ROS_ERROR ("Failed to enable ALLCALL for PWM channels");

            nanosleep ((const struct timespec[]){{0, 5000000L}}, NULL);   //sleep 5microsec, wait for osci


            mode1res = i2c_smbus_read_byte_data (_controller_io_handle, __MODE1);
            mode1res = mode1res & ~__SLEEP; //                 # wake up (reset sleep)

            if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __MODE1, mode1res))
                ROS_ERROR ("Failed to recover from low power mode");

            nanosleep((const struct timespec[]){{0, 5000000L}}, NULL);   //sleep 5microsec, wait for osci

            // the first time we activate a board, we mark it and set all of its servo channels to 0
            _set_pwm_interval_all (0, 0);
        }
    }
}



static void _set_pwm_interval (int servo, int start, int end)
{
    ROS_DEBUG("_set_pwm_interval enter");

    if ((servo<1) || (servo>(MAX_SERVOS))) {
        ROS_ERROR("Invalid servo number %d :: servo numbers must be between 1 and %d", servo, MAX_BOARDS);
        return;
    }

    int board = ((int)(servo/16))+1;
    _set_active_board(board);

    servo = servo % 16;

    board = _active_board - 1;

    ROS_DEBUG("_set_pwm_interval board=%d", board);
    // the public API is ONE based and hardware is ZERO based

    int channel = servo - 1;
    
    if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __CHANNEL_ON_L+4*channel, start & 0xFF))
        ROS_ERROR ("Error setting PWM start low byte on servo %d on board %d", servo, _active_board);
    if (0 >  i2c_smbus_write_byte_data (_controller_io_handle, __CHANNEL_ON_H+4*channel, start  >> 8))
        ROS_ERROR ("Error setting PWM start high byte on servo %d on board %d", servo, _active_board);
    if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __CHANNEL_OFF_L+4*channel, end & 0xFF))
        ROS_ERROR ("Error setting PWM end low byte on servo %d on board %d", servo, _active_board);
    if (0 > i2c_smbus_write_byte_data (_controller_io_handle, __CHANNEL_OFF_H+4*channel, end >> 8))
        ROS_ERROR ("Error setting PWM end high byte on servo %d on board %d", servo, _active_board);
}



static void _set_pwm_interval_proportional (int servo, float value)
{
    if ((value < -1.0) || (value > 1.0)) {
        ROS_ERROR("Invalid proportion value %f :: proportion values must be between -1.0 and 1.0", value);
        return;
    }

    servo_config* configp = &(_servo_configs[servo-1]);
    
    if ((configp->center < 0) ||(configp->range < 0)) {
        ROS_ERROR("Missing servo configuration for servo[%d]", servo);
        return;
    }

    int pos = (configp->direction * (((float)(configp->range) / 2) * value)) + configp->center;
        
    if ((pos < 0) || (pos > 4096)) {
        ROS_ERROR("Invalid computed position servo[%d] = (direction(%d) * ((range(%d) / 2) * value(%6.4f))) + %d = %d", servo, configp->direction, configp->range, value, configp->center, pos);
        return;
    }
    _set_pwm_interval (servo, 0, pos);
    ROS_DEBUG("servo[%d] = (direction(%d) * ((range(%d) / 2) * value(%6.4f))) + %d = %d", servo, configp->direction, configp->range, value, configp->center, pos);
}



static void _config_servo (int servo, int center, int range, int direction)
{
    if ((servo < 1) || (servo > (MAX_SERVOS))) {
        ROS_ERROR("Invalid servo number %d :: servo numbers must be between 1 and %d", servo, MAX_SERVOS);
        return;
    }

    if ((center < 0) || (center > 4096))
        ROS_ERROR("Invalid center value %d :: center values must be between 0 and 4096", center);

    if ((center < 0) || (center > 4096))
        ROS_ERROR("Invalid range value %d :: range values must be between 0 and 4096", range);

    if (((center - (range/2)) < 0) || (((range/2) + center) > 4096))
        ROS_ERROR("Invalid range center combination %d ± %d :: range/2 ± center must be between 0 and 4096", center, (range/2));

    _servo_configs[servo-1].center = center;
    _servo_configs[servo-1].range = range;
    _servo_configs[servo-1].direction = direction;
    _servo_configs[servo-1].mode_pos = POSITION_UNDEFINED;

    if (servo > _last_servo)    // used for internal optimizations
        _last_servo = servo;

    ROS_INFO("Servo #%d configured: center=%d, range=%d, direction=%d", servo, center, range, direction);
}


static int _config_servo_position (int servo, int position)
{
    if ((servo < 1) || (servo > (MAX_SERVOS))) {
        ROS_ERROR("Invalid servo number %d :: servo numbers must be between 1 and %d", servo, MAX_SERVOS);
        return -1;
    }
    if ((position < POSITION_UNDEFINED) || (position > POSITION_RIGHTREAR)) {
        ROS_ERROR("Invalid drive mode position %d :: positions are 0 = non-drive, 1 = left front, 2 = right front, 3 = left rear, and 4 = right rear", position);
        return -1;
    }
    _servo_configs[servo-1].mode_pos = position;
    ROS_INFO("Servo #%d configured: position=%d", servo, position);
    return 0;
}


static int _config_drive_mode (std::string mode, float rpm, float radius, float track, float scale)
{
    int mode_val = MODE_UNDEFINED;

    // assumes the parameter was provided in the proper case
    if      (0 == strcmp (mode.c_str(), _CONST("ackerman")))
        mode_val = MODE_ACKERMAN;
    else if (0 == strcmp (mode.c_str(), _CONST("differential")))
        mode_val = MODE_DIFFERENTIAL;
    else if (0 == strcmp (mode.c_str(), _CONST("mecanum")))
        mode_val = MODE_MECANUM;
    else {
        mode_val = MODE_INVALID;
        ROS_ERROR("Invalid drive mode %s :: drive mode must be one of ackerman, differential, or mecanum", mode.c_str());
        return -1;
    }

    if (rpm <= 0.0) {
        ROS_ERROR("Invalid RPM %6.4f :: the motor's output RPM must be greater than 0.0", rpm);
        return -1;
    }

    if (radius <= 0.0) {
        ROS_ERROR("Invalid radius %6.4f :: the wheel radius must be greater than 0.0 meters", radius);
        return -1;
    }

    if (track <= 0.0) {
        ROS_ERROR("Invalid track %6.4f :: the axel track must be greater than 0.0 meters", track);
        return -1;
    }

    if (scale <= 0.0) {
        ROS_ERROR("Invalid scale %6.4f :: the scalar for Twist messages must be greater than 0.0", scale);
        return -1;
    }

    _active_drive.mode = mode_val;
    _active_drive.rpm = rpm;
    _active_drive.radius = radius;  // the service takes the radius in meters
    _active_drive.track = track;        // the service takes the track in meters
    _active_drive.scale = scale;

    ROS_INFO("Drive mode configured: mode=%s, rpm=%6.4f, radius=%6.4f, track=%6.4f, scale=%6.4f", mode.c_str(), rpm, radius, track, scale);
    return 0;
}



static void _init (char* filename)
{
    int res;
    char mode1res;
    int i;

    /* initialize all of the global data objects */
    
    for (i=0; i<MAX_BOARDS;i++)
        _pwm_boards[i] = -1;
    _active_board = -1;

    for (i=0; i<(MAX_SERVOS);i++) {
        // these values have not useful meaning
        _servo_configs[i].center = -1;
        _servo_configs[i].range = -1;
        _servo_configs[i].direction = 1;
        _servo_configs[i].mode_pos = -1;
    }
    _last_servo = -1;

    _active_drive.mode = MODE_UNDEFINED;
    _active_drive.rpm = -1.0;
    _active_drive.radius = -1.0;
    _active_drive.track = -1.0;
    _active_drive.scale = -1.0;
    
    
    if ((_controller_io_handle = open (filename, O_RDWR)) < 0) {
        ROS_FATAL ("Failed to open I2C bus %s", filename);
        return; /* exit(1) */   /* additional ERROR HANDLING information is available with 'errno' */
    }
}



// ------------------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------------------------------

void servos_absolute (const i2cpwm_board::ServoArray::ConstPtr& msg)
{
    /* this subscription works on the active_board */
    
    for(std::vector<i2cpwm_board::Servo>::const_iterator sp = msg->servos.begin(); sp != msg->servos.end(); ++sp) {
        int servo = sp->servo;
        int value = sp->value;

        if ((value < 0) || (value > 4096)) {
            ROS_ERROR("Invalid PWM value %d :: PWM values must be between 0 and 4096", value);
            continue;
        }
        _set_pwm_interval (servo, 0, value);
        ROS_DEBUG("servo[%d] = %d", servo, value);
    }
}


void servos_proportional (const i2cpwm_board::ServoArray::ConstPtr& msg)
{
    /* this subscription works on the active_board */

    for(std::vector<i2cpwm_board::Servo>::const_iterator sp = msg->servos.begin(); sp != msg->servos.end(); ++sp) {
        int servo = sp->servo;
        float value = sp->value;
        _set_pwm_interval_proportional (servo, value);
    }
}




void servos_drive (const geometry_msgs::Twist::ConstPtr& msg)
{
    /* this subscription works on the active_board */

    int i;
    float delta, range, ratio;
    float temp_x, temp_y, temp_r;
    float dir_x, dir_y, dir_r;
    float speed[4];
    
    /* msg is a pointer to a Twist message: msg->linear and msg->angular each of which have members .x .y .z */
    /* the subscriber uses the maths from: http://robotsforroboticists.com/drive-kinematics/ */ 

    ROS_DEBUG("servos_drive Twist = [%5.2f %5.2f %5.2f] [%5.2f %5.2f %5.2f]", 
             msg->linear.x, msg->linear.y, msg->linear.z, msg->angular.x, msg->angular.y, msg->angular.z);

    if (_active_drive.mode == MODE_UNDEFINED) {
        ROS_ERROR("drive mode not set");
        return;
    }
    if ((_active_drive.mode < MODE_UNDEFINED) || (_active_drive.mode >= MODE_INVALID)) {
        ROS_ERROR("unrecognized drive mode set %d", _active_drive.mode);
        return;
    }

    dir_x = ((msg->linear.x  < 0) ? -1 : 1);
    dir_y = ((msg->linear.y  < 0) ? -1 : 1);
    dir_r = ((msg->angular.z < 0) ? -1 : 1);

    temp_x = _active_drive.scale * _abs(msg->linear.x);
    temp_y = _active_drive.scale * _abs(msg->linear.y);
    temp_r = _abs(msg->angular.z);
        
    // temp_x = _smoothing (temp_x);
    // temp_y = _smoothing (temp_y);
    // temp_r = _smoothing (temp_r) / 2;

    /* the delta is the angular velocity * half the drive track */
    delta = (temp_r * (_active_drive.track / 2));

    ratio = _convert_mps_to_proportional(temp_y + delta);
    if (ratio > 1.0)
        temp_y /= ratio;

    
    switch (_active_drive.mode) {

    case MODE_ACKERMAN:
        /*
          with ackerman drive, steering is handled by a separate servo
          we drive assigned servos exclusively by the linear.x
        */
        speed[0] = temp_x * dir_x;
        speed[0] = _convert_mps_to_proportional(speed[0]);
        if (_abs(speed[0]) > 1.0)
            speed[0] = 1.0 * dir_x;
        
        ROS_DEBUG("ackerman drive mode speed=%6.4f", speed[0]);
        break;

    case MODE_DIFFERENTIAL:
        /*
          with differential drive, steering is handled by the relative speed of left and right servos
          we drive assigned servos by mixing linear.x and angular.z
          we compute the delta for left and right components
          we use the sign of the angular velocity to determine which is the faster / slower
        */

        /* the delta is the angular velocity * half the drive track */
        
        if (dir_r > 0) {    // turning right
            speed[0] = (temp_y + delta) * dir_y;
            speed[1] = (temp_y - delta) * dir_y;
        } else {        // turning left
            speed[0] = (temp_y - delta) * dir_y;
            speed[1] = (temp_y + delta) * dir_y;
        }

        ROS_DEBUG("computed differential drive mode speed left=%6.4f right=%6.4f", speed[0], speed[1]);

        /* if any of the results are greater that 1.0, we need to scale all the results down */
        range = _max (_abs(speed[0]), _abs(speed[1]));
        
        ratio = _convert_mps_to_proportional(range);
        if (ratio > 1.0) {
            speed[0] /= ratio;
            speed[1] /= ratio;
        }
        ROS_DEBUG("adjusted differential drive mode speed left=%6.4f right=%6.4f", speed[0], speed[1]);

        speed[0] = _convert_mps_to_proportional(speed[0]);
        speed[1] = _convert_mps_to_proportional(speed[1]);

        ROS_DEBUG("differential drive mode speed left=%6.4f right=%6.4f", speed[0], speed[1]);
        break;

    case MODE_MECANUM:
        /*
          with mecanum drive, steering is handled by the relative speed of left and right servos
          with mecanum drive, lateral motion is handled by the rotation of front and rear servos
          we drive assigned servos by mixing linear.x and angular.z  and linear.y
        */

        if (dir_r > 0) {    // turning right
            speed[0] = speed[2] = (temp_y + delta) * dir_y;
            speed[1] = speed[3] = (temp_y - delta) * dir_y;
        } else {        // turning left
            speed[0] = speed[2] = (temp_y - delta) * dir_y;
            speed[1] = speed[3] = (temp_y + delta) * dir_y;
        }

        speed[0] += temp_x * dir_x;
        speed[3] += temp_x * dir_x;
        speed[1] -= temp_x * dir_x;
        speed[2] -= temp_x * dir_x;
        ROS_DEBUG("computed mecanum drive mode speed leftfront=%6.4f rightfront=%6.4f leftrear=%6.4f rightreer=%6.4f", speed[0], speed[1], speed[2], speed[3]);

        range = _max (_max (_max (_abs(speed[0]), _abs(speed[1])), _abs(speed[2])), _abs(speed[3]));
        ratio = _convert_mps_to_proportional(range);
        if (ratio > 1.0) {
            speed[0] /= ratio;
            speed[1] /= ratio;
            speed[2] /= ratio;
            speed[3] /= ratio;
        }
        ROS_DEBUG("adjusted mecanum drive mode speed leftfront=%6.4f rightfront=%6.4f leftrear=%6.4f rightreer=%6.4f", speed[0], speed[1], speed[2], speed[3]);

        speed[0] = _convert_mps_to_proportional(speed[0]);
        speed[1] = _convert_mps_to_proportional(speed[1]);
        speed[2] = _convert_mps_to_proportional(speed[2]);
        speed[3] = _convert_mps_to_proportional(speed[3]);

        ROS_DEBUG("mecanum drive mode speed leftfront=%6.4f rightfront=%6.4f leftrear=%6.4f rightreer=%6.4f", speed[0], speed[1], speed[2], speed[3]);
        break;

    default:
        break;

    }
    
    /* find all drive servos and set their new speed */
    for (i=0; i<(_last_servo); i++) {
        // we use 'fall thru' on the switch statement to allow all necessary servos to be controlled
        switch (_active_drive.mode) {
        case MODE_MECANUM:
            if (_servo_configs[i].mode_pos == POSITION_LEFTREAR)
                _set_pwm_interval_proportional (i+1, speed[2]);
            if (_servo_configs[i].mode_pos == POSITION_RIGHTREAR)
                _set_pwm_interval_proportional (i+1, speed[3]);
        case MODE_DIFFERENTIAL:
            if (_servo_configs[i].mode_pos == POSITION_LEFTFRONT)
                _set_pwm_interval_proportional (i+1, speed[0]);
        case MODE_ACKERMAN:
            if (_servo_configs[i].mode_pos == POSITION_RIGHTFRONT)
            _set_pwm_interval_proportional (i+1, speed[1]);
        }
    }
}


// ------------------------------------------------------------------------------------------------------------------------------------
// services
// ------------------------------------------------------------------------------------------------------------------------------------

bool set_pwm_frequency (i2cpwm_board::IntValue::Request &req, i2cpwm_board::IntValue::Response &res)
{
    int freq;
    freq = req.value;
    if ((freq<12) || (freq>1024)) {
        ROS_ERROR("Invalid PWM frequency %d :: PWM frequencies should be between 12 and 1024", freq);
        freq = 50;  // most analog RC servos are designed for 20ms pulses.
        res.error = freq;
    }
    _set_pwm_frequency (freq);  // I think we must reset frequency when we change boards
    res.error = freq;
    return true;
}


bool config_servos (i2cpwm_board::ServosConfig::Request &req, i2cpwm_board::ServosConfig::Response &res)
{
    /* this service works on the active_board */
    int i;
    
    res.error = 0;

    if ((_active_board<1) || (_active_board>62)) {
        ROS_ERROR("Internal error - invalid board number %d :: PWM board numbers must be between 1 and 62", _active_board);
        res.error = -1;
        return true;
    }

    for (i=0;i<req.servos.size();i++) {
        int servo = req.servos[i].servo;
        int center = req.servos[i].center;
        int range = req.servos[i].range;
        int direction = req.servos[i].direction;

        _config_servo (servo, center, range, direction);
    }
    
    return true;
}


bool config_drive_mode (i2cpwm_board::DriveMode::Request &req, i2cpwm_board::DriveMode::Response &res)
{
    res.error = 0;

    int i;

    if ((res.error = _config_drive_mode (req.mode, req.rpm, req.radius, req.track, req.scale)))
        return true;

    for (i=0;i<req.servos.size();i++) {
        int servo = req.servos[i].servo;
        int position = req.servos[i].position;

        if (_config_servo_position (servo, position) != 0) {
            res.error = servo; /* this needs to be more specific and indicate a bad server ID was provided */
            continue;
        }
    }

    return true;
}



bool stop_servos (std_srvs::Empty::Request& req, std_srvs::Empty::Response& res)
{
    int save_active = _active_board;
    int i;

    for (i=0; i<MAX_BOARDS; i++) {
        if (_pwm_boards[i] > 0) {
            _set_active_board (i+1);    // API is ONE based
            _set_pwm_interval_all (0, 0);
        }
    }
    _set_active_board (save_active);    // restore last active board
    return true;
}





static std::string _get_string_param (XmlRpc::XmlRpcValue obj, std::string param_name)
{
    XmlRpc::XmlRpcValue &item = obj[param_name];
    if (item.getType() == XmlRpc::XmlRpcValue::TypeString)
        return item;

    ROS_WARN("invalid paramter type for %s - expected TypeString", param_name.c_str());
    return 0;
}

    
static int _get_int_param (XmlRpc::XmlRpcValue obj, std::string param_name)
{
    XmlRpc::XmlRpcValue &item = obj[param_name];
    if (item.getType() == XmlRpc::XmlRpcValue::TypeInt)
        return item;

    ROS_WARN("invalid paramter type for %s - expected TypeInt", param_name.c_str());
    return 0;
}

    
static double _get_float_param (XmlRpc::XmlRpcValue obj, std::string param_name)
{
    XmlRpc::XmlRpcValue &item = obj[param_name];
    if (item.getType() == XmlRpc::XmlRpcValue::TypeDouble)
        return item;

    ROS_WARN("invalid paramter type for %s - expected TypeDouble", param_name.c_str());
    return 0;
}

    
static int _load_params (void)
{       
    ros::NodeHandle nhp;                    // not currently private namespace

    /*
      pwm_frequency: 50
    */

    int pwm;
    nhp.param ("pwm_frequency", pwm, 50);

    
    /*
      // note: servos are numbered sequntially with '1' being the first servo on board #1, '17' is the first servo on board #2

      servo_config:
        - {id: 1, center: 333, direction: -1, range: 100}
        - {id: 2, center: 336, direction: 1, range: 108}

    */
    // attempt to load configuration for servos
    if(nhp.hasParam ("servo_config")) {
        XmlRpc::XmlRpcValue servos;
        nhp.getParam ("servo_config", servos);

        if(servos.getType() == XmlRpc::XmlRpcValue::TypeArray) {
            ROS_DEBUG("Retrieving members from 'servo_config' in namespace(%s)", nhp.getNamespace().c_str());
                
            for(int32_t i = 0; i < servos.size(); i++) {
                XmlRpc::XmlRpcValue servo;
                servo = servos[i];  // get the data from the iterator
                if(servo.getType() == XmlRpc::XmlRpcValue::TypeStruct) {
                    ROS_DEBUG("Retrieving items from 'servo_config' member %d in namespace(%s)", i, nhp.getNamespace().c_str());

                    // get the servo settings
                    int id = 0, center = 0, direction = 0, range = 0;
                    id = _get_int_param (servo, "id");
                    center = _get_int_param (servo, "center");
                    direction = _get_int_param (servo, "direction");
                    range = _get_int_param (servo, "range");
                    
                    if (id && center && direction && range) {
                        if ((id >= 1) && (id <= MAX_SERVOS)) {
                            int board = ((int)(id / 16)) + 1;
                            _set_active_board (board);
                            _set_pwm_frequency (pwm);
                            _config_servo (id, center, range, direction);
                        }
                        else
                            ROS_WARN("Parameter servo id=%d is out of bounds", id);
                    }
                    else
                        ROS_WARN("Invalid parameters for servo id=%d'", id);
                }
                else
                    ROS_WARN("Invalid type %d for member of 'servo_config' - expected TypeStruct(%d)", servo.getType(), XmlRpc::XmlRpcValue::TypeStruct);
            }
        }
        else
            ROS_WARN("Invalid type %d for 'servo_config' - expected TypeArray(%d)", servos.getType(), XmlRpc::XmlRpcValue::TypeArray);
    }
    else
        ROS_DEBUG("Parameter Server namespace[%s] does not contain 'servo_config", nhp.getNamespace().c_str());


    /*
      drive_config:
        mode: mecanum
        radius: 0.062
        rpm: 60.0
        scale: 0.3
        track: 0.2
        servos:
            - {id: 1, position: 1}
            - {id: 2, position: 2}
            - {id: 3, position: 3}
            - {id: 4, position: 4}
    */

    // attempt to load configuration for drive mode
    if(nhp.hasParam ("drive_config")) {
        XmlRpc::XmlRpcValue drive;
        nhp.getParam ("drive_config", drive);

        if(drive.getType() == XmlRpc::XmlRpcValue::TypeStruct) {
            ROS_DEBUG("Retrieving members from 'drive_config' in namespace(%s)", nhp.getNamespace().c_str());

            // get the drive mode settings
            std::string mode;
            float radius, rpm, scale, track;
            int id, position;

            mode = _get_string_param (drive, "mode");
            rpm = _get_float_param (drive, "rpm");
            radius = _get_float_param (drive, "radius");
            track = _get_float_param (drive, "track");
            scale = _get_float_param (drive, "scale");

            _config_drive_mode (mode, rpm, radius, track, scale);

            XmlRpc::XmlRpcValue &servos = drive["servos"];
            if(servos.getType() == XmlRpc::XmlRpcValue::TypeArray) {
                ROS_DEBUG("Retrieving members from 'drive_config/servos' in namespace(%s)", nhp.getNamespace().c_str());
                
                for(int32_t i = 0; i < servos.size(); i++) {
                    XmlRpc::XmlRpcValue servo;
                    servo = servos[i];  // get the data from the iterator
                    if(servo.getType() == XmlRpc::XmlRpcValue::TypeStruct) {
                        ROS_DEBUG("Retrieving items from 'drive_config/servos' member %d in namespace(%s)", i, nhp.getNamespace().c_str());

                        // get the servo position settings
                        int id, position;
                        id = _get_int_param (servo, "id");
                        position = _get_int_param (servo, "position");
                    
                        if (id && position)
                            _config_servo_position (id, position); // had its own error reporting
                    }
                    else
                        ROS_WARN("Invalid type %d for member %d of 'drive_config/servos' - expected TypeStruct(%d)", i, servo.getType(), XmlRpc::XmlRpcValue::TypeStruct);
                }
            }
            else
                ROS_WARN("Invalid type %d for 'drive_config/servos' - expected TypeArray(%d)", servos.getType(), XmlRpc::XmlRpcValue::TypeArray);
        }
        else
            ROS_WARN("Invalid type %d for 'drive_config' - expected TypeStruct(%d)", drive.getType(), XmlRpc::XmlRpcValue::TypeStruct);
    }
    else
        ROS_DEBUG("Parameter Server namespace[%s] does not contain 'drive_config", nhp.getNamespace().c_str());
}   


// ------------------------------------------------------------------------------------------------------------------------------------
// main
// ------------------------------------------------------------------------------------------------------------------------------------

int main (int argc, char **argv)
{

    _controller_io_handle = 0;
    _pwm_frequency = 50;        // set the initial pulse frequency to 50 Hz which is standard for RC servos

    
    _init (_CONST("/dev/i2c-1"));   // default I2C device on RPi2 and RPi3 = "/dev/i2c-1";

    _set_active_board (1);

    _set_pwm_frequency (50);


    ros::init (argc, argv, "i2cpwm_controller");

    ros::NodeHandle n;

    ros::ServiceServer freq_srv =       n.advertiseService  ("set_pwm_frequency",           set_pwm_frequency);
    ros::ServiceServer config_srv =     n.advertiseService  ("config_servos",               config_servos);         // 'config' will setup the necessary properties of continuous servos and is helpful for standard servos
    ros::ServiceServer mode_srv =       n.advertiseService  ("config_drive_mode",           config_drive_mode);     // 'mode' specifies which servos are used for motion and which behavior will be applied when driving
    ros::ServiceServer stop_srv =       n.advertiseService  ("stop_servos",                 stop_servos);           // the 'stop' service can be used at any time

    ros::Subscriber abs_sub =           n.subscribe         ("servos_absolute", 500,        servos_absolute);       // the 'absolute' topic will be used for standard servo motion and testing of continuous servos
    ros::Subscriber rel_sub =           n.subscribe         ("servos_proportional", 500,    servos_proportional);   // the 'proportion' topic will be used for standard servos and continuous rotation aka drive servos
    ros::Subscriber drive_sub =         n.subscribe         ("servos_drive", 500,           servos_drive);          // the 'drive' topic will be used for continuous rotation aka drive servos controlled by Twist messages
    
    _load_params();
    
    ros::spin();

    close (_controller_io_handle);

  return 0;
}

